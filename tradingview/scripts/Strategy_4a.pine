//@version=4

strategy('Strategy_4a', {{{header}}})

{{{date_range}}}

take_profit_perc = input(title="Take Profit %", type=input.integer, defval=10, minval=1, maxval=100)
stop_loss_perc = input(title="Stop Loss %", type=input.integer, defval=5, minval=1, maxval=100)
bb_overbought = input(title="BB %B Overbought", type=input.integer, defval=75, minval=1, maxval=100)
bb_oversold = input(title="BB %B Oversold", type=input.integer, defval=25, minval=1, maxval=100)

ema5 = ema(close, 5)
ema21 = ema(close, 21)
ema50 = ema(close, 50)
ema200 = ema(close, 200)

// Trailing stop loss
usr_risk = input(title="Equity Risk (%)",type=input.integer,minval=1,maxval=100,step=1,defval=3,confirm=false)
atr_mult = input(title="Stop Loss (x*ATR, Float)",type=input.float,minval=0.1,maxval=100,step=0.1,defval=0.5,confirm=false)
slPoints = input(title="Stop Loss Trail Points (Pips)",type=input.integer,minval=1,maxval=1000,step=1,defval=1,confirm=false)
slOffset = input(title="Stop Loss Trail Offset (Pips)",type=input.integer,minval=1,maxval=1000,step=1,defval=1,confirm=false)
atr_valu = input(title="ATR (Period)",type=input.integer,minval=1,maxval=500,step=1,defval=14,confirm=false)
atr = atr(atr_valu)

// BB %B
length = input(20, minval=1)
src = input(close, title="Source")
mult = input(2.0, minval=0.001, maxval=50, title="StdDev")
basis = sma(src, length)
dev = mult * stdev(src, length)
upper = basis + dev
lower = basis - dev
bbr = (src - lower)/(upper - lower)

// Awesome Oscillator
ao = sma(hl2,5) - sma(hl2,34)

// ADX
ao_value = input(title="Awesome Oscillator", type=input.integer, defval=2)
adx_value = input(title="ADX", type=input.integer, defval=15)
adxlen = input(14, title="ADX Smoothing")
dilen = input(14, title="DI Length")
dirmov(len) =>
	up = change(high)
	down = -change(low)
	plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
	minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
	truerange = rma(tr, len)
	plus = fixnan(100 * rma(plusDM, len) / truerange)
	minus = fixnan(100 * rma(minusDM, len) / truerange)
	[plus, minus]
adx(dilen, adxlen) =>
	[plus, minus] = dirmov(dilen)
	sum = plus + minus
	adx = 100 * rma(abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
sig = adx(dilen, adxlen)

long_strategy = ema5>ema21 and ema50>ema200 and bbr>(bb_overbought/100) and ao>ao_value and sig>adx_value
short_strategy = ema5<ema21 and ema50<ema200 and bbr<(bb_oversold/100) and ao<-ao_value and sig>adx_value

plot(ema5, color=color.blue)
plot(ema21, color=color.aqua)
plot(ema50, color=color.purple)
plot(ema200, color=color.red)
bgcolor(color=long_strategy ? color.green : na, transp=80)
bgcolor(color=short_strategy ? color.purple : na, transp=80)
    
//if inDateRange and long_strategy
//    strategy.entry("long", strategy.long, 100, when=date_range)
//    strategy.exit("exit", "long", stop=strategy.position_avg_price*(100-stop_loss_perc)/100, limit=strategy.position_avg_price*(100+take_profit_perc)/100)
//if inDateRange and short_strategy
//    strategy.entry("short", strategy.short, 100, when=date_range)
//    strategy.exit("exit", "short", stop=strategy.position_avg_price*(100+stop_loss_perc)/100, limit=strategy.position_avg_price*(100-take_profit_perc)/100)

if long_strategy
    risk = usr_risk * 0.01 * strategy.equity
    stopLoss = low[1] - atr[1] * atr_mult
    entryPrice = high[1]
    units = risk / (entryPrice - stopLoss)
    strategy.entry("long", strategy.long, units, stop=entryPrice, when=date_range)
    strategy.exit("exit long", from_entry="long", trail_points=slPoints, trail_offset=slOffset)

if short_strategy
    risk = usr_risk * 0.01 * strategy.equity
    stopLoss = high[1] + atr[1] * atr_mult
    entryPrice = low[1]
    units = risk / (stopLoss - entryPrice)
    strategy.entry("short", strategy.short, units, stop=entryPrice, when=date_range)
    strategy.exit("exit short", from_entry="short", trail_points=slPoints, trail_offset=slOffset)
    
// Squeeze
sqsrc = close
sqlength = input(34)
sqmedian=0
sqmult=input(2.5)
sqoffset = input(20)
tr_custom() => 
    x1=high-low
    x2=abs(high-close[1])
    x3=abs(low-close[1])
    max(x1, max(x2,x3))
    
atr_custom(x,y) => 
    sma(x,y)
    
sqdev = (sqmult * stdev(sqsrc, sqlength))
sqbasis=linreg(sqsrc, sqlength, sqmedian)
ul = (sqbasis + sqdev)
ll = (sqbasis - sqdev)
tr_v = tr_custom()
acustom=(2*atr_custom(tr_v, sqlength))
uls=sqbasis+acustom
lls=sqbasis-acustom

// Plot stdev channel
plot(sqbasis, linewidth=1, color=color.navy, style=plot.style_line, linewidth=1, title="sqmedian")
lb=plot(ul, color=color.red, linewidth=1, title="BB+", style=plot.style_linebr)
tb=plot(ll, color=color.green, linewidth=1, title="BB-", style=plot.style_linebr)
fill(tb,lb, color.silver, title="Region fill")

// Plot ATR channel
plot(sqbasis, linewidth=2, color=color.navy, style=plot.style_line, linewidth=2, title="sqmedian")
ls=plot(uls, color=color.red, linewidth=1, title="Starc+", style=plot.style_circles)
ts=plot(lls, color=color.green, linewidth=1, title="Star-", style=plot.style_circles)
fill(ts,tb, color.green, title="Region fill")
fill(ls,lb, color.red, title="Region fill")

// Mark SQZ
plot_offs_high=2
plot_offs_low=2 
sqz_f=(uls>ul) and (lls<ll)
b_color=sqz_f ? color.teal : na
plot(sqz_f ? lls-plot_offs_low : na, color=b_color, style=plot.style_cross, linewidth=2)
plot(sqz_f ? uls+plot_offs_high : na, color=b_color, style=plot.style_cross, linewidth=2)